function [O] = CalculateOutputKernel(Psi1, Psi2, M, kernel, hyper, issym)
%issym: use chol or svd to enforce the Output kernel to be symmetric (1) or
%not (0).
% in this case, Psi1 = Psi2
%O: N1 x N2 matrix


[N1, ~] = size(Psi1);
[N2, n] = size(Psi2);
O = zeros(N1,N2);
switch kernel

    case 'TC'
        %hp = [c1 c2 ... cM c lam sig^2 c0]
        %TC_idv: c1 c(Psi Ktc Psi')+ c2 c^2(Psi Ktc Psi').^2 ... + cM c^M(Psi Ktc Psi').^M
        Ot = ones(N1,N2);
        t=hyper(M+2).^(1:n);
        triuP = triu(repmat(t,n,1),1);
        K = triuP + triuP' + diag(t);

        if issym == 1
            try
                Kc = chol(K)';
                tmp = Psi2*Kc;
            catch
                [Uk,Sk,~] = svd(K);
                tmp = Psi2*Uk*sqrt(Sk);
            end
            Otmp = tmp*tmp';
        else
            Otmp = Psi1*K*Psi2';
        end

        for i = 1:M
            Ot = Ot.*Otmp;
            O = O + exp(hyper(i))*hyper(M+1)^i*Ot;
        end

    case 'DC_idv'
        %hp = [c1 c2 ... cM c lam rho sig^2 h0]
        %DC_idv: c1 c(Psi Kdc Psi')+ c2 c^2(Psi Kdc Psi').^2 ... + cM c^M(Psi Kdc Psi').^M 
        Ot = ones(N1,N2);
        U = (hyper(M+2)*hyper(M+3)).^(1:n)';
        V = (hyper(M+2)/hyper(M+3)).^(1:n)';
        K = tril(U*V')+triu(V*U',1);

        if issym == 1
            try
                Kc = chol(K)';
                tmp = Psi2*Kc;
            catch
                [Uk,Sk,~] = svd(K);
                tmp = Psi2*Uk*sqrt(Sk);
            end
            Otmp = tmp*tmp';
        else
            Otmp = Psi1*K*Psi2';
        end

        for i = 1:M
            Ot = Ot.*Otmp;
            O = O + exp(hyper(i))*hyper(M+1)^i*Ot;
        end

    case 'TC_poly'
        %[c1 c2 ... cM lam1 lam2 ... lamM sig^2 h0]
        %TC_poly: c1 (Psi Ktc1 Psi') + c2 (Psi Ktc2 Psi').^2 + ... + cM (Psi KtcM Psi').^M
        for i = 1:M
            t=hyper(M+i).^(1:n);
            triuP = triu(repmat(t,n,1),1);
            K = triuP + triuP' + diag(t);
            if issym == 1
                try
                    Kc = chol(K)';
                    tmp = Psi2*Kc;
                catch
                    [Uk,Sk,~] = svd(K);
                    tmp = Psi2*Uk*sqrt(Sk);
                end
                Otmp = tmp*tmp';
            else
                Otmp = Psi1*K*Psi2';
            end
            O = O + exp(hyper(i))*(Otmp).^i;
        end

    case 'DC_poly'
        %[c1 c2 ... cM lam1 lam2 ... lamM rho1 rho2 ... rhoM sig^2 h0]
        %TC_poly: c1 (Psi Kdc1 Psi') + c2 (Psi Kdc2 Psi').^2 + ... + cM (Psi KdcM Psi').^M
        for i = 1:M
            U = (hyper(M+i)*hyper(2*M+i)).^(1:n)';
            V = (hyper(M+i)/hyper(2*M+i)).^(1:n)';
            K = tril(U*V')+triu(V*U',1);
            if issym == 1
                try
                    Kc = chol(K)';
                    tmp = Psi2*Kc;
                catch
                    [Uk,Sk,~] = svd(K);
                    tmp = Psi2*Uk*sqrt(Sk);
                end
                Otmp = tmp*tmp';
            else
                Otmp = Psi1*K*Psi2';
            end
            O = O + exp(hyper(i))*(Otmp).^i;
        end

    case 'DC_mpoly'
        % hp = [c1 c2 ... cM lam1 lam21 lam22 ... lamM1 ...lamMM rho1 rho21 rho22 ... rhoM1 ...rhoMM  sig^2 h0]
        % DC_mpoly: c1 (Psi Kdc1 Psi') + c2 (Psi Kdc21 Psi').*(Psi Kdc22 Psi') + ... + cM (Psi KdcM1 Psi').*(Psi KdcM2 Psi').*....*(Psi KdcMM Psi')
        for i = 1:M
            Ot = ones(N1,N2);
            for mi = 1:i
                idlam = M+i*(i-1)/2+mi;
                idrho = M+M*(M+1)/2+i*(i-1)/2+mi;
                U = (hyper(idlam)*hyper(idrho)).^(1:n)';
                V = (hyper(idlam)/hyper(idrho)).^(1:n)';
                K = tril(U*V')+triu(V*U',1);
                if issym == 1
                    try
                        Kc = chol(K)';
                        tmp = Psi2*Kc;
                    catch
                        [Uk,Sk,~] = svd(K);
                        tmp = Psi2*Uk*sqrt(Sk);
                    end
                    Otmp = tmp*tmp';
                else
                    Otmp = Psi1*K*Psi2';
                end

                Ot = Ot.*Otmp;
            end
            O = O + exp(hyper(i))*Ot;
        end
        
end
end