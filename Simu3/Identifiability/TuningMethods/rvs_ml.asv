function [EstInfo] = rvs_ml(data, n, M, kernel, method)
%Error model: mode = {'error', wc, ph}.
%Full model: mode = {'full',[],[]}.

[lb,ub] = lubounds(kernel, M);

u = data(:,1); 
y = data(:,2); 
N = length(u);
y = y(n+1:N);
Psi = CalculatePsi(u, n);

hpini = ini_rvs(M, Psi, y, kernel, method);
ff = @(x)nglglklhd(x, Psi, y, kernel, M, method);
options = optimoptions('fmincon', 'Display', 'off');
hp = fmincon(ff,hpini,[],[],[],[],lb,ub,[],options);
[cost, Mx1, Mx2] = nglglklhd(hp, Psi, y, kernel, M, method);

switch method
    case 'chol'
        Oiinv =  Mx1'*Mx1;
    case 'svd'
        Oiinv =  Mx1*Mx2*Mx1';
    case 'combined'
        if Mx2(2,1) == 0
            Oiinv =  Mx1*Mx2*Mx1';
        else
            Oiinv =  Mx1'*Mx1;
        end
end


W = Oiinv*(y-hp(end));
O = CalculateOutputKernel(Psi, Psi, M, kernel, hp, 0);
yhat = O*W + hp(end);


EstInfo.hp = hp;
EstInfo.kernel = kernel;
EstInfo.method = method;
EstInfo.yhat = yhat;
%EstInfo.efit = gof(y,yhat);
EstInfo.W = W;
EstInfo.OutputKernel = O;
EstInfo.Psi = Psi;
EstInfo.cost = cost;
end

function [hpini] = ini_rvs(M, Psi, y, kernel, method)

if strcmp(kernel, 'TC_poly')
    % hp = [c1 c2 ... cM lam1 lam2 ... lamM sig^2 h0]
    c = [-20:5:10]; Lc = length(c);
    lam = [0.5:0.1:0.9 0.95]; Llam = length(lam);
    sigsqr = [0.1:0.1:0.5]; Lsigsqr = length(sigsqr);
    h0 = [-4:2:4]; Lh0 = length(h0);

    hpini = [zeros(1,M);0.5*ones(M,1);0.1;0];

    for i = 1:M
        obj = zeros(Lc,Llam);

        for nc = 1:Lc
            hpini(i) = c(nc);
            for nlam = 1:Llam
                hpini(M+i) = lam(nlam);
                obj(nc,nlam) = nglglklhd(hpini, Psi, y, kernel, M, method);
            end
        end
        [~, indx] = min(obj(:));
        [indc, indlam] = ind2sub([nc nlam],indx);
        hpini(i) = c(indc); hpini(M+i) = lam(indlam);

    end

    obj = zeros(Lsigsqr, Lh0);
    for nsigsqr = 1:Lsigsqr
        for nh0 = 1:Lh0
            hpini(end-1) = sigsqr(nsigsqr); hpini(end) = h0(nh0);
            obj(nsigsqr, nh0) = nglglklhd(hpini, Psi, y, kernel, M, method);
        end
    end
    [~, indx] = min(obj(:));
    [indsigsqr, indh0] = ind2sub([nsigsqr, nh0],indx);
    hpini(end-1) = sigsqr(indsigsqr); hpini(end) = h0(indh0);
end

if strcmp(kernel, 'DC_poly')
    % hp = [c1 c2 ... cM lam1 lam2 ... lamM rho1 rho2 ... rhoM sig^2 h0]
    %     c = [-20:1:5]; Lc = length(c);
    %     lam = [0.2 0.5:0.2:0.9 0.95]; Llam = length(lam);
    %     rho = [0.05 0.1:0.2:0.5 0.7 0.9]; Lrho = length(rho);
    %
    %     C = [c; repmat(c,M-1,1)];
    %
    %     hpini = [ones(M,1);0.7*ones(M,1);0.3*ones(M,1);0.2;0];
    %
    %
    %     for i = 1:M
    %         c = C(i,:);
    %         obj = zeros(Lc, Llam, Lrho);
    %         for nc = 1:Lc
    %             hpini(i) = c(nc);
    %             for nlam = 1:Llam
    %                 hpini(M+i) = lam(nlam);
    %                 for nrho = 1:Lrho
    %                     hpini(2*M+i) = rho(nrho);
    %                     obj(nc, nlam,nrho) = nglglklhd(hpini, Psi, y, kernel, M, method);
    %                 end
    %             end
    %         end
    %
    %         [~, indx] = min(obj(:));
    %         [indc, indlam, indrho] = ind2sub([nc, nlam, nrho], indx);
    %         hpini(i) = c(indc); hpini(M+i) = lam(indlam); hpini(2*M+i) = rho(indrho);
    %     end


    ratio = 5;
    lb = [-10*ones(M,1); 0.1*ones(M,1); 0.1*ones(M,1)];
    ub = [10*ones(M,1); 0.9*ones(M,1); 0.9*ones(M,1)];
    fun = @(x)nglglklhd([x;0.1;0], Psi, y, kernel, M, method);
    ms = MultiStart('FunctionTolerance',2e-4,'UseParallel',false);
    ms.StartPointsToRun='bounds';
    ms.Display='on';
    problem = createOptimProblem('fmincon','x0',lb+(ub-lb).*0.5, 'objective',fun,'lb',lb,'ub',ub);
    hpini = run(ms,problem,ratio*length(ub));

    hpini = [hpini;0.1;0];

    sigsqr = [0.1:0.1:0.5]; Lsigsqr = length(sigsqr);
    h0 = [-4:2:4]; Lh0 = length(h0);

    obj = zeros(Lsigsqr, Lh0);
    for nsigsqr = 1:Lsigsqr
        for nh0 = 1:Lh0
            hpini(end-1) = sigsqr(nsigsqr); hpini(end) = h0(nh0);
            obj(nsigsqr, nh0) = nglglklhd(hpini, Psi, y, kernel, M, method);
        end
    end
    [~, indx] = min(obj(:));
    [indsigsqr, indh0] = ind2sub([nsigsqr, nh0],indx);
    hpini(end-1) = sigsqr(indsigsqr); hpini(end) = h0(indh0);

end

if strcmp(kernel, 'DC_mpoly')
    % hp = [c1 c2 ... cM lam1 lam21 lam22 ... lamM1 ...lamMM rho1 rho21 rho22 ... rhoM1 ...rhoMM sig^2 h0]

    ratio = 10;
    lb = [-10*ones(M,1); 0.1*ones(M*(M+1)/2,1); 0.1*ones(M*(M+1)/2,1)];
    ub = [10*ones(M,1); 0.9*ones(M*(M+1)/2,1); 0.9*ones(M*(M+1)/2,1)];
    fun = @(x)nglglklhd([x;0.1;0], Psi, y, kernel, M, method);
    ms = MultiStart('FunctionTolerance',2e-4,'UseParallel',false);
    ms.StartPointsToRun='bounds';
    ms.Display='on';
    problem = createOptimProblem('fmincon','x0',lb+(ub-lb).*0.5, 'objective',fun,'lb',lb,'ub',ub);
    hpini = run(ms,problem,ratio*length(ub));

    hpini = [hpini;0.1;0];
    sigsqr = [0.1:0.1:0.5]; Lsigsqr = length(sigsqr);
    h0 = [-4:2:4]; Lh0 = length(h0);
    
    obj = zeros(Lsigsqr, Lh0);
    for nsigsqr = 1:Lsigsqr
        for nh0 = 1:Lh0
            hpini(end-1) = sigsqr(nsigsqr); hpini(end) = h0(nh0);
            obj(nsigsqr, nh0) = nglglklhd(hpini, Psi, y, kernel, M, method);
        end
    end
    [~, indx] = min(obj(:));
    [indsigsqr, indh0] = ind2sub([nsigsqr, nh0],indx);
    hpini(end-1) = sigsqr(indsigsqr); hpini(end) = h0(indh0);
end

end

function [obj, Mx1, Mx2] = nglglklhd(hyper, Psi, Y, kernel, M, method)
warning('off', 'MATLAB:nearlySingularMatrix');

[Nd, ~] = size(Psi);

sigsqr = hyper(end-1); h0 = hyper(end);


Y = Y - h0;
O = CalculateOutputKernel(Psi, Psi, M, kernel, hyper, 1);
Oi = O+sigsqr*eye(Nd);

cond_flag = 1; chol_flag = 1;
try
    if cond(Oi)>  1e+100
        cond_flag = 0;
    end
catch
    cond_flag = 0;
end

switch method
    case 'chol'
        try
            L = chol(Oi)';
        catch
            %fprintf('chol problem!\n');
            chol_flag = 0;
        end


        if  cond_flag ~= 1 || chol_flag ~= 1
            obj = 1/eps;
        else
            Linv = eye(Nd)/L;
            obj = sumsqr(Linv*Y)+2*sum(log(abs(diag(L))));
            %obj = sumsqr(Linv'*Linv*Y)/sumsqr(Linv)^2;
            Mx1 = Linv; Mx2 = L;
        end

    case 'svd'
        if  cond_flag ~= 1
            obj = 1/eps;
        else
            [U,S,~] = svd(Oi);
            Sinv = diag(1./diag(S));
            %obj = sumsqr(Sinv*U'*Y)/sum(diag(Sinv))^2;
            obj = sumsqr(sqrt(Sinv)*U'*Y)+sum(log(abs(diag(S))));
            Mx1 = U; Mx2 = Sinv;
        end

    case 'combined'

        if  cond_flag ~= 1
            obj = 1/eps;
        else
            try
                L = chol(Oi)';
                Linv = eye(Nd)/L;
                %obj = sumsqr(Linv'*Linv*Y)/sumsqr(Linv)^2;
                obj = sumsqr(Linv*Y)+2*sum(log(abs(diag(L))));
                Mx1 = Linv; Mx2 = L;
            catch
                [U,S,~] = svd(Oi);
                Sinv = diag(1./diag(S));
                %obj = sumsqr(Sinv*U'*Y)/sum(diag(Sinv))^2;
                obj = sumsqr(sqrt(Sinv)*U'*Y)+sum(log(abs(diag(S))));
                Mx1 = U; Mx2 = Sinv;
            end
        end
end
end

