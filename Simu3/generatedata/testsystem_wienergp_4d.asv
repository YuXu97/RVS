function [sys0, data] = testsystem_wienergp_4d(T,par, repi)
% -- 4th order system

T = 2*T;

sys0.nx = 6;
if(par.input), sys0.nu = 1; else sys0.nu = 0; end;
sys0.ny = 1;
sys0.type = 'Wiener';
sys0.which = '4d atan';

% Dynamics
% a = [0.3676 0.88746 0.52406 0.55497];
% c = [1 0.1 -0.49 0.01];
a= [-0.467, 1.12, -0.925, 0.308, -0.0364, 0.00110];
c = [-2.67, 2.96, -2.01, 0.914, -0.181, -0.0102];

sys = tf([0 a], [1 c], 1, 'Variable','z^-1');


% numerator = [0.1 0];
% denominator = [1 -1.812 0.8578];
% sys = tf(numerator,denominator,1);

% [sys, ~] = generate_linear_system_randomly(10, 0.9, 0.1);

sys = ss(sys);
%  impulse(sys)
% ob =  obsv(sys);
% unobs = length(sys.a) - rank(ob);

sys0.ss.A = sys.a;
sys0.ss.C = sys.c;
if(par.input)
    sys0.ss.B = sys.b;
    u = 0.5*randn(1,T);
else
    sys0.ss.B = [];
    u = [];
end

% sys0.ss.h = @(z)(2*max(min(z,0.5),-0.5));
%  sys0.ss.h = @(z)(nonmon(z,0.5,0.3));
pc = [0.1 0.5]%2*(rand(3,1)-0.5);
sys0.ss.h = @(z)(pc(1)*z.^2+pc(2)*z+pc(3));
sys0.ss.Q = 0.25^2*eye(sys0.nx);
sys0.ss.R = 0.1^2; % Measurement noise


% Initial state -----------------------------------------------------------
sys0.ss.X1 = zeros(sys0.nx,1);
sys0.ss.P1 = 1*eye(sys0.nx);

% Initialize
data.tVec = (1:T);
x = zeros(sys0.nx, T);
z = zeros(1, T);
y = zeros(1, T);

% w = mvnrnd(zeros(1,sys0.nx), sys0.ss.Q, T)';
% e = sqrt(sys0.ss.R)*randn(1, T);
e = randn(1, T);
x(:,1) = mvnrnd(sys0.ss.X1, sys0.ss.P1, 1)';

for(t = 1:T-1)
    if(par.input)
        x(:,t+1) = sys0.ss.A*x(:,t) + sys0.ss.B*u(t);
%         x(:,t+1) = sys0.ss.A*x(:,t) + sys0.ss.B*u(t) + w(:,t);
    else
        x(:,t+1) = sys0.ss.A*x(:,t);
%         x(:,t+1) = sys0.ss.A*x(:,t) + w(:,t);
    end
    z(t) = sys0.ss.C*x(:,t);
%     y(t) = sys0.ss.h(z(t)) + e(t);
    y(t) = sys0.ss.h(z(t));
end


z(t+1) = sys0.ss.C*x(:,t+1);
y(t+1) = sys0.ss.h(z(t+1));

snr = db2pow(100000);
e = (e - mean(e))*std(y)/std(e)/sqrt(snr); 
y = y + e;
 
% ytt = sys0.ss.h(lsim(sys, u, 1:T)) +e'; 
% 
% plot(y); hold on;
% plot(ytt); grid on;
% legend('y','ytt')
N = T/2;
data.u = u(1:N);
data.uv = u(N+1:2*N);
data.x = x;
data.z = z;
data.y = y(1:N);
data.yv = y(N+1:2*N);
% data.w = w;
data.e = e;

save(['databank/' 'data_' int2str(repi) '.mat'], 'data');
save(['databank/' 'sys0_' int2str(repi) '.mat'], 'sys0');
end

function [system, poles] = generate_linear_system_randomly(order, poleub, polelb, fs_index)
% Randomly generate a stable lienar system
% the argument 'order' is the needed order of the system
if nargin < 4 || strcmp(fs_index,'fast')
%     pole_max = 2;
%     pole_min = 0;
%     % pole check
%     value = 1;
% %     poles_real_min = -1;
% %     poles_tan_max = 10000;
% 
% % ratio = 0;
%    while pole_max > poleub || pole_min < polelb  || value > 1e6 %|| ratio < 0.8 
%        bw = inf;
%         while isinf(bw)||isnan(bw) % finite bandwidth of generated system
%             mc = rss(order,1,1);
%             bw = bandwidth(mc);
%         end
%         f = 1; %bw*3*2*pi;
%         md = c2d(mc,1/f,'zoh');
%         md.d = 0;
%         system = idpoly(md);
%         
%         poles = pole(system);
%         pole_max = max(abs(poles));
%         pole_min = min(abs(poles));
%                 
%         value = max(abs([system.f system.b]));
% %         ratio = cos(angle(poles(1)));
% 
%    end
% 

% %poles that are close to the real line
% pole_max = 2;
% pole_min = 0;
% poles_imag_max = 2;
% 
% while pole_max > poleub || pole_min < polelb  || value > 1e6 || poles_imag_max > 0.1
%     bw = inf;
%     while isinf(bw)||isnan(bw) % finite bandwidth of generated system
%         mc = rss(order,1,1);
%         bw = bandwidth(mc);
%     end
%     f = 1; %bw*3*2*pi;
%     md = c2d(mc,1/f,'zoh');
%     md.d = 0;
%     system = idpoly(md);
%     
%     poles = pole(system);
%     pole_max = max(abs(poles));
%     pole_min = min(abs(poles));
%     poles_imag_max = max(imag(poles));
%     
%     value = max(abs([system.f system.b]));
% end
% system = zpk([zero(system);0],pole(system),2*rand-1,1);


   
% five poles with the largest modulus is real and around 0.75
pole_max = 100;

while pole_max > poleub || pole_min < polelb  || value > 1e6 || pole_max > 0.45
    bw = inf;
    while isinf(bw)||isnan(bw) % finite bandwidth of generated system
        mc = rss(order-5,1,1);
        bw = bandwidth(mc);
    end
    f = 1;%bw*3*2*pi;
    md = c2d(mc,1/f,'zoh');
    md.d = 0;
    system_t = idpoly(md);
    poles = pole(system_t);
    pole_max = max(abs(poles));
    pole_min = min(abs(poles));
    value = max(abs([system_t.f system_t.b]));
end
zeros_zpk = [zero(system_t);rand;rand(5,1)];%make sure there is zeros delay
poles_zpk = [poles; 0.25*rand(5,1)+0.7];
system = zpk(zeros_zpk,poles_zpk,2*rand-1,1);


   
   
   
%    num_con = 0;
% 
%     while pole_max > poleub || pole_min < polelb  || value > 1e6 || num_con < ceil(order*4/5)
%         bw = inf;
%         while isinf(bw)||isnan(bw) % finite bandwidth of generated system
%             mc = rss(order,1,1);
%             bw = bandwidth(mc);
%         end
%         f = 1;%bw*3*2*pi;
%         md = c2d(mc,1/f,'zoh');
%         md.d = 2*rand-1;
%         system = idpoly(md);
%         
%         poles = pole(system);
%         pole_max = max(abs(poles));
%         pole_min = min(abs(poles));
%         
%         con1 = find(real(poles)<0);
%         con2 = con1;
%         num_con = length(intersect(con1,con2));
%         
%         value = max(abs([system.f system.b]));
%     end


%    num_con = 0;
% 
%     while pole_max > poleub || pole_min < polelb  || value > 1e6 || num_con < ceil(order)
%         bw = inf;
%         while isinf(bw)||isnan(bw) % finite bandwidth of generated system
%             mc = rss(order,1,1);
%             bw = bandwidth(mc);
%         end
%         f = 1;%bw*3*2*pi;
%         md = c2d(mc,1/f,'zoh');
%         md.d = rand;
%         system = idpoly(md);
%         
%         poles = pole(system);
%         pole_max = max(abs(poles));
%         pole_min = min(abs(poles));
%         
%         pole_real = real(poles);
%         pole_imag = imag(poles);
%         con1 = find(pole_real>0);
%         con2 = find(pole_imag==0)
%         num_con = length(intersect(con1,con2));
%         
%         value = max(abs([system.f system.b]));
%     end
    
    
    poles = pole(system);
    num_poles = length(pole(system));
    num_zeros = length(zero(system));
    pz = [num_poles num_zeros];


elseif strcmp(fs_index,'slow')

    pole_max = 0.5; % pole check
    value = 1;
    while pole_max < poleub || pole_max > 1 - eps || value > 1e6
        bw = inf;
        while isinf(bw)||isnan(bw) % finite bandwidth of generated system
            mc = rss(order,1,1);
            bw = bandwidth(mc);
        end
        f = bw*3*2*pi;
        md = c2d(mc,1/f,'zoh');
        md.d = 0;
        system = idpoly(md);
        pole_max = max(abs(pole(system)));
        value = max(abs([system.f system.b]));
    end
end

end

