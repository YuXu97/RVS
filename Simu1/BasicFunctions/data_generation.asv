function [return_filename] = data_generation(N, n, inputtype, poleub, noisetype, repi)
warning('off');
M = 1000 + N;

switch inputtype{1}

    case 'white'
        fd_range = inputtype{2};
        fb_low = fd_range(1);
        fd_upper = fd_range(2);
        u = idinput(M,'rgs',[fb_low,fd_upper],[]);

    case 'filtered'
        Syst_filter = generate_linear_system_randomly(2,poleub);
        u = randn(M,1);
        u = sim(Syst_filter,u);
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%full-order case: product of same systems
t = (0:M-1)';
order1 = 1;
order2 = 1;

[system1, ~, ~] = generate_linear_system_randomly(order1, 0.85, 0.2);
[system2, ~, ~] = generate_linear_system_randomly(order2, 0.85, 0.2);
% numerator = [0.7568 0];
% denominator = [1 0.5036];
%system = tf(numerator,denominator,1);
yL1 = lsim(system1,u,t);
[g1,~] = impulse(system1,t);
g1 = g1(1:n);
yL2 = lsim(system2,u,t);
[g2,~] = impulse(system2,t);
g2 = g2(1:n);
% ratio = 1/g(1);
% g = g(1:n)*ratio;
%Lout = yL*ratio;

ytrue1 = zeros(M,1);
for i = 0:length(a)-1
    ytrue1 = ytrue1 + a(i+1)*yL1.^i;
end


ytrue = ytrue1 + ytrue2;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

snr = 100;%*(0.1+0.9*rand);
switch noisetype
    case 'gauss'
        noise = randn(N,1);
    case 'uniform'
        noise = rand(N,1)-0.5;
end
noise = (noise - mean(noise))*std(ytrue)/std(noise)/sqrt(snr);
y = ytrue(end-N+1:end) + noise;
u = u(end-N+1:end);
data = [u,y];

datainfo.data = data;
datainfo.LinearSystemImpulseResponse1 = g1;
datainfo.LinearSystemImpulseResponse2 = g2;
datainfo.snr = snr;
datainfo.PolyCoefficient1 = a;
datainfo.PolyCoefficient2 = b;
datainfo.LinearSysOrder1 = order1;
datainfo.LinearSysOrder2 = order2;
% datainfo.LinearSysOuput = Lout;
% datainfo.NumberOfPolesZeros = pz;
datainfo.NoiseVariance = var(noise);

return_filename = ['Databank/data_N' int2str(N) '_repi=' int2str(repi) '.mat'];
save(return_filename, 'datainfo');
end


function [system, pole_max, pz] = generate_linear_system_randomly(order, poleub, polelb, fs_index)
% Randomly generate a stable lienar system
% the argument 'order' is the needed order of the system
if nargin < 4 || strcmp(fs_index,'fast')
    pole_max = 2; 
    pole_min = 0;
    % pole check
    value = 1;
%     poles_real_min = -1;
%     poles_tan_max = 10000;

    while pole_max > poleub || pole_min < polelb  || value > 1e6
        bw = inf;
        while isinf(bw)||isnan(bw) % finite bandwidth of generated system
            mc = rss(order,1,1);
            bw = bandwidth(mc);
        end
        f = 1;%bw*3*2*pi;
        md = c2d(mc,1/f,'zoh');
        md.d = 1;
        system = idpoly(md);
        pole_max = max(abs(pole(system)));
        pole_min = min(abs(pole(system)));
        value = max(abs([system.f system.b]));
    end
    num_poles = length(pole(system));
    num_zeros = length(zero(system));
    pz = [num_poles num_zeros];


elseif strcmp(fs_index,'slow')

    pole_max = 0.5; % pole check
    value = 1;
    while pole_max < poleub || pole_max > 1 - eps || value > 1e6
        bw = inf;
        while isinf(bw)||isnan(bw) % finite bandwidth of generated system
            mc = rss(order,1,1);
            bw = bandwidth(mc);
        end
        f = bw*3*2*pi;
        md = c2d(mc,1/f,'zoh');
        md.d = 0;
        system = idpoly(md);
        pole_max = max(abs(pole(system)));
        value = max(abs([system.f system.b]));
    end
end

end
