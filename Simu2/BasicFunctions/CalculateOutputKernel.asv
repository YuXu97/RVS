function [O] = CalculateOutputKernel(Psi1, Psi2, M, kernel, hyper, issym)
%issym: use chol or svd to enforce the Output kernel to be symmetric (1) or
%not (0).
% in this case, Psi1 = Psi2
%O: N1 x N2 matrix
[N1, ~] = size(Psi1);
[N2, n] = size(Psi2);

O = zeros(N1,N2);
switch kernel
    case 'DC_wh_bd'
        % hp = [a1 a2 ... aM c1 c2 lam1 lam2 rho1 rho2 sig^2 a0]

        ts = 1:n;
        pc = hyper(1:M);
        c1 = hyper(M+1); c2 = hyper(M+2);
        lam1 = hyper(M+3); lam2 = hyper(M+4);
        rho1 = hyper(M+5); rho2 = hyper(M+6);

        U1 = (lam1*rho1).^(ts)';
        V1 = (lam1/rho1).^(ts)';
        K1 = tril(U1*V1')+triu(V1*U1',1);

        U2 = (lam2*rho2).^(ts)';
        V2 = (lam2/rho2).^(ts)';
        K2 = tril(U2*V2')+triu(V2*U2',1);

        if issym == 1
            try
                Kc = chol(K1)';
                tmp = Psi2*Kc;
            catch
                [Uk,Sk,~] = svd(K1);
                tmp = Psi2*Uk*sqrt(Sk);
            end
            Otmp = tmp*tmp';
        else
            Otmp = Psi1*K1*Psi2';
        end

        for i = 1:M
            O = O + pc(i)^2*(c1^2*Otmp).^i;
        end
        O = conv2fft(c2^2*K2,O,'full');
        O = O(n:N1+n-1,n:N2+n-1);




    case 'DC_wh_opt'
        % hp = [a1 a2 ... aM c1 c2 lam1 lam2 rho1 rho2 sig^2 a0]

        ts = 1:n;
        pc = hyper(1:M);
        c1 = hyper(M+1); c2 = hyper(M+2);
        lam1 = hyper(M+3); lam2 = hyper(M+4);
        rho1 = hyper(M+5); rho2 = hyper(M+6);

        U1 = (lam1*rho1).^(ts)';
        V1 = (lam1/rho1).^(ts)';
        K1 = tril(U1*V1')+triu(V1*U1',1);

        U2 = (lam2*rho2).^(ts)';
        V2 = (lam2/rho2).^(ts)';
        K2 = tril(U2*V2')+triu(V2*U2',1);
        t=(lam1*rho1).^(ts);

        if issym == 1
            xi = Psi2*t';
            try
                Kc = chol(K1)';
                tmp = Psi2*Kc;
            catch
                [Uk,Sk,~] = svd(K1);
                tmp = Psi2*Uk*sqrt(Sk);
            end
            Otmp = tmp*tmp';

        else
            xi1 = Psi1*t';
            xi2 = Psi2*t';
            Otmp = Psi1*K1*Psi2';
        end

        for i = 1:M
            O = O + pc(i)^2*(c1^2*Otmp).^i;
        end


        for i = 1:M
            for j = i+1:M
                if issym == 1
                    tmpp = (xi.^i)*(xi.^j)';
                    O = O + pc(i)*pc(j)*c1^(i+j)*(tmpp+tmpp');
                else
                    O = O + pc(i)*pc(j)*c1^(i+j)*((xi1.^i)*(xi2.^j)'+(xi1.^j)*(xi2.^i)');
                end
            end
        end

        O = conv2fft(c2^2*K2,O,'full');
        O = O(n:N1+n-1,n:N2+n-1);



    case 'DC_wh_dc'
        % hp = [a1 a2 ... aM c1 c2 lam1 lam2 rho1 rho2 sig^2 a0]

        ts = 1:n;
        pc = hyper(1:M);
        c1 = hyper(M+1); c2 = hyper(M+2);
        lam1 = hyper(M+3); lam2 = hyper(M+4);
        rho1 = hyper(M+5); rho2 = hyper(M+6);

        U1 = (lam1*rho1).^(ts)';
        V1 = (lam1/rho1).^(ts)';
        K1 = tril(U1*V1')+triu(V1*U1',1);

        U2 = (lam2*rho2).^(ts)';
        V2 = (lam2/rho2).^(ts)';
        K2 = tril(U2*V2')+triu(V2*U2',1);

        t=(lam1*rho1).^(ts);

        if issym == 1
            xi = Psi2*t';
            XI = repmat(xi,1,N2);
            try
                Kc = chol(K1)';
                tmp = Psi2*Kc;
            catch
                [Uk,Sk,~] = svd(K1);
                tmp = Psi2*Uk*sqrt(Sk);
            end
            Otmp = tmp*tmp';

        else
            xi1 = Psi1*t';
            xi2 = Psi2*t';
            XI1 = repmat(xi1,1,N2);
            XI2 = repmat(xi2,1,N1);
            Otmp = Psi1*K1*Psi2';
        end

        for i = 1:M
            O = O + pc(i)^2*(c1^2*Otmp).^i;
        end

        for i = 1:M
            for j = i+1:M
                if issym == 1
                    TMP = (Otmp.^i).*(XI.^(j-i));
                    O = O + pc(i)*pc(j)*c1^(i+j)*(TMP+TMP');
                else
                    O = O + pc(i)*pc(j)*c1^(i+j)*((Otmp.^i).*(XI2.^(j-i))'+(Otmp.^i).*(XI1.^(j-i)));
                end
            end
        end

        O = conv2fft(c2^2*K2,O,'full');
        O = O(n:N1+n-1,n:N2+n-1);

end